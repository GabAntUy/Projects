// <auto-generated />
using System;
using DataAccessLogic.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLogic.Migrations
{
    [DbContext(typeof(EcosistemasMarinosContext))]
    [Migration("20231017165930_add-precargas-002")]
    partial class addprecargas002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenazaEcosistema", b =>
                {
                    b.Property<int>("AmenazasId")
                        .HasColumnType("int");

                    b.Property<int>("EcosistemasId")
                        .HasColumnType("int");

                    b.HasKey("AmenazasId", "EcosistemasId");

                    b.HasIndex("EcosistemasId");

                    b.ToTable("AmenazaEcosistema");
                });

            modelBuilder.Entity("AmenazaEspecie", b =>
                {
                    b.Property<int>("AmenazasId")
                        .HasColumnType("int");

                    b.Property<int>("EspeciesId")
                        .HasColumnType("int");

                    b.HasKey("AmenazasId", "EspeciesId");

                    b.HasIndex("EspeciesId");

                    b.ToTable("AmenazaEspecie");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Amenaza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradoDePeligro")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Amenazas");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Ecosistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<int>("EstadoDeConservacionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoDeConservacionId");

                    b.ToTable("Ecosistemas");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Especie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoConservacionId")
                        .HasColumnType("int");

                    b.Property<int?>("HabitaId")
                        .HasColumnType("int");

                    b.Property<string>("NombreCientifico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreVulgar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoConservacionId");

                    b.HasIndex("HabitaId");

                    b.ToTable("Especies");
                });

            modelBuilder.Entity("BusinessLogic.Entities.EstadoDeConservacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("EstadosDeConservacion");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEntidad")
                        .HasColumnType("int");

                    b.Property<string>("TipoEntidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoIso")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CodigoIso")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContraseniaCifrada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ecosistema_Especie", b =>
                {
                    b.Property<int>("EspeciesQuePuedenHabitarloId")
                        .HasColumnType("int");

                    b.Property<int>("PuedeHabitarId")
                        .HasColumnType("int");

                    b.HasKey("EspeciesQuePuedenHabitarloId", "PuedeHabitarId");

                    b.HasIndex("PuedeHabitarId");

                    b.ToTable("Ecosistema_Especie");
                });

            modelBuilder.Entity("Ecosistema_Pais", b =>
                {
                    b.Property<int>("EcosistemasId")
                        .HasColumnType("int");

                    b.Property<int>("PaisesId")
                        .HasColumnType("int");

                    b.HasKey("EcosistemasId", "PaisesId");

                    b.HasIndex("PaisesId");

                    b.ToTable("Ecosistema_Pais");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Administrador", b =>
                {
                    b.HasBaseType("BusinessLogic.Entities.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("BusinessLogic.Entities.Persona", b =>
                {
                    b.HasBaseType("BusinessLogic.Entities.Usuario");

                    b.HasDiscriminator().HasValue("Persona");
                });

            modelBuilder.Entity("AmenazaEcosistema", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Amenaza", null)
                        .WithMany()
                        .HasForeignKey("AmenazasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Entities.Ecosistema", null)
                        .WithMany()
                        .HasForeignKey("EcosistemasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmenazaEspecie", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Amenaza", null)
                        .WithMany()
                        .HasForeignKey("AmenazasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Entities.Especie", null)
                        .WithMany()
                        .HasForeignKey("EspeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Entities.Ecosistema", b =>
                {
                    b.HasOne("BusinessLogic.Entities.EstadoDeConservacion", "EstadoDeConservacion")
                        .WithMany()
                        .HasForeignKey("EstadoDeConservacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("BusinessLogic.Entities.ImagenEcosistema", "Imagenes", b1 =>
                        {
                            b1.Property<string>("Nombre")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("EcosistemaId")
                                .HasColumnType("int");

                            b1.HasKey("Nombre", "EcosistemaId");

                            b1.HasIndex("EcosistemaId");

                            b1.ToTable("ImagenEcosistema");

                            b1.WithOwner()
                                .HasForeignKey("EcosistemaId");
                        });

                    b.OwnsOne("BusinessLogic.Entities.UbicacionEcosistema", "Ubicacion", b1 =>
                        {
                            b1.Property<int>("EcosistemaId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Latitud")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Longitud")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("EcosistemaId");

                            b1.ToTable("Ecosistemas");

                            b1.WithOwner()
                                .HasForeignKey("EcosistemaId");
                        });

                    b.Navigation("EstadoDeConservacion");

                    b.Navigation("Imagenes");

                    b.Navigation("Ubicacion")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Entities.Especie", b =>
                {
                    b.HasOne("BusinessLogic.Entities.EstadoDeConservacion", "EstadoConservacion")
                        .WithMany()
                        .HasForeignKey("EstadoConservacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Entities.Ecosistema", "Habita")
                        .WithMany("EspeciesQueLoHabitan")
                        .HasForeignKey("HabitaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("BusinessLogic.Entities.ImagenEspecie", "Imagenes", b1 =>
                        {
                            b1.Property<string>("Nombre")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("EspecieId")
                                .HasColumnType("int");

                            b1.HasKey("Nombre", "EspecieId");

                            b1.HasIndex("EspecieId");

                            b1.ToTable("ImagenEspecie");

                            b1.WithOwner()
                                .HasForeignKey("EspecieId");
                        });

                    b.OwnsOne("BusinessLogic.Entities.RangoLargo", "RangoLargo", b1 =>
                        {
                            b1.Property<int>("EspecieId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("EspecieId");

                            b1.ToTable("Especies");

                            b1.WithOwner()
                                .HasForeignKey("EspecieId");
                        });

                    b.OwnsOne("BusinessLogic.Entities.RangoPeso", "RangoPeso", b1 =>
                        {
                            b1.Property<int>("EspecieId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("EspecieId");

                            b1.ToTable("Especies");

                            b1.WithOwner()
                                .HasForeignKey("EspecieId");
                        });

                    b.Navigation("EstadoConservacion");

                    b.Navigation("Habita");

                    b.Navigation("Imagenes");

                    b.Navigation("RangoLargo")
                        .IsRequired();

                    b.Navigation("RangoPeso")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Entities.EstadoDeConservacion", b =>
                {
                    b.OwnsOne("BusinessLogic.Entities.RangoConservacion", "RangoConservacion", b1 =>
                        {
                            b1.Property<int>("EstadoDeConservacionId")
                                .HasColumnType("int");

                            b1.Property<int>("Maximo")
                                .HasColumnType("int");

                            b1.Property<int>("Minimo")
                                .HasColumnType("int");

                            b1.HasKey("EstadoDeConservacionId");

                            b1.ToTable("EstadosDeConservacion");

                            b1.WithOwner()
                                .HasForeignKey("EstadoDeConservacionId");
                        });

                    b.Navigation("RangoConservacion")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecosistema_Especie", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Especie", null)
                        .WithMany()
                        .HasForeignKey("EspeciesQuePuedenHabitarloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Entities.Ecosistema", null)
                        .WithMany()
                        .HasForeignKey("PuedeHabitarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecosistema_Pais", b =>
                {
                    b.HasOne("BusinessLogic.Entities.Ecosistema", null)
                        .WithMany()
                        .HasForeignKey("EcosistemasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessLogic.Entities.Pais", null)
                        .WithMany()
                        .HasForeignKey("PaisesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessLogic.Entities.Ecosistema", b =>
                {
                    b.Navigation("EspeciesQueLoHabitan");
                });
#pragma warning restore 612, 618
        }
    }
}
